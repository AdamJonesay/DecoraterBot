# coding=utf-8from __future__ import unicode_literalsimport discordimport asyncioimport jsonimport ioimport tracebackimport urllibimport sysimport osimport base64import os.pathimport randomimport concurrentimport platform# noinspection PyPackageRequirementsimport youtube_dlimport timeimport cmathimport ctypesimport subprocessfrom threading import Timerfrom collections import dequeimport BotPMErrorfrom discord.ext import commandsbotbanslist = io.open(sys.path[0] + '\\resources\\ConfigData\\BotBanned.json', 'r')banlist = json.load(botbanslist)try:    botvoicechannelfile = io.open(sys.path[0] + '\\resources\\ConfigData\\BotVoiceChannel.json', 'r')    botvoicechannel = json.load(botvoicechannelfile)except FileNotFoundError:    passbotmessagesdata = io.open(sys.path[0] + '\\resources\\ConfigData\\BotMessages.json', 'r')botmessages = json.load(botmessagesdata)# Prefix to the voice commands.PATH = sys.path[0] + '\\resources\\ConfigData\\Credentials.json'if os.path.isfile(PATH) and os.access(PATH, os.R_OK):    credsfile = io.open(PATH, 'r')    credentials = json.load(credsfile)    _bot_prefix = str(credentials['bot_prefix'][0])# Settings for the Voice Channel stuff.bits = ctypes.sizeof(ctypes.c_voidp)if bits == 4:    opusdll = sys.path[0] + "\\resources\\opus\\opus.dll"    # for finding ffmpeg    os.chdir(sys.path[0] + "\\resources\\ffmpeg\\x86")elif bits == 8:    opusdll = sys.path[0] + "\\resources\\opus\\opus64.dll"    # for finding ffmpeg    os.chdir(sys.path[0] + "\\resources\\ffmpeg\\x64")class YTDLLogger(object):    def debug(self, msg):        pass    def warning(self, msg):        pass    def error(self, msg):        pass# youtube_dl optionsytdlo = {'quiet': True, 'no_warnings': True, 'ignoreerrors': True, 'logger': YTDLLogger()}global playerglobal vchannelglobal vchannel_nameglobal voice_message_channelglobal voice_message_serverglobal voice_message_server_nameglobal voiceglobal _sent_finished_messageglobal sent_prune_error_messageglobal is_bot_playingglobal bot_playlistglobal bot_playlist_entriesglobal _temp_player_1global _temp_player_2global _temp_player_3global _temp_player_4global _temp_player_5global _temp_player_6global _temp_player_7global _temp_player_8global _temp_player_9global _temp_player_10global ffmopglobal ffmoutglobal verror  # needed for a unhandled voice channel issue.# noinspection PyRedeclarationplayer = None# noinspection PyRedeclarationvchannel = None# noinspection PyRedeclarationvchannel_name = None# noinspection PyRedeclarationvoice_message_channel = None# noinspection PyRedeclarationvoice_message_server = None# noinspection PyRedeclarationvoice_message_server_name = None# noinspection PyRedeclarationvoice = None# noinspection PyRedeclaration_sent_finished_message = False# noinspection PyRedeclarationsent_prune_error_message = False# noinspection PyRedeclarationis_bot_playing = False# noinspection PyRedeclarationbot_playlist = []# noinspection PyRedeclarationbot_playlist_entries = []# noinspection PyRedeclaration_temp_player_1 = None# noinspection PyRedeclaration_temp_player_2 = None# noinspection PyRedeclaration_temp_player_3 = None# noinspection PyRedeclaration_temp_player_4 = None# noinspection PyRedeclaration_temp_player_5 = None# noinspection PyRedeclaration_temp_player_6 = None# noinspection PyRedeclaration_temp_player_7 = None# noinspection PyRedeclaration_temp_player_8 = None# noinspection PyRedeclaration_temp_player_9 = None# noinspection PyRedeclaration_temp_player_10 = None# noinspection PyRedeclarationffmop = "-nostats -loglevel quiet"# noinspection PyRedeclarationffmout = io.open(sys.path[0] + '\\resources\\Logs\\ffmpeg.shit', 'w')# noinspection PyRedeclarationverror = Falseclass VoiceBotCommands:    __slots__ = ['bot']    def __init__(self, client):        self.bot = client    @classmethod    async def voice_stuff_new(self, client, message):        global player        global vchannel        global vchannel_name        global voice_message_channel        global voice        global _sent_finished_message        global voice_message_server        global is_bot_playing        global bot_playlist        global _temp_player_1        global _temp_player_2        global _temp_player_3        global _temp_player_4        global _temp_player_5        global _temp_player_6        global _temp_player_7        global _temp_player_8        global _temp_player_9        global _temp_player_10        global bot_playlist_entries        global ffmop        global ffmout        global voice_message_server_name        if message.content.startswith(_bot_prefix + 'JoinVoiceChannel'):            if message.author.id in banlist['Users']:                return            elif vchannel is not None:                try:                    messagedata = str(botmessages['join_voice_channel_command_data'][0])                    try:                        message_data = messagedata.format(voice_message_server.name)                    except AttributeError:                        # noinspection PyTypeChecker                        message_data = messagedata.format(voice_message_server_name)                    await client.send_message(message.channel, message_data)                except discord.errors.Forbidden:                    await BotPMError._resolve_send_message_error(client, message)            else:                discord.opus.load_opus(opusdll)                voice_message_channel = message.channel                voice_message_server = message.channel.server                voice_message_server_name = message.channel.server.name                if message.author.voice_channel is not None:                    vchannel = message.author.voice_channel                    vchannel_name = message.author.voice_channel.name                    if vchannel.id not in botvoicechannel:                        botvoicechannel['Bot_Current_Voice_Channel'].append(vchannel.id)                    if voice_message_server.id not in botvoicechannel:                        botvoicechannel['Bot_Current_Voice_Channel'].append(voice_message_server.id)                    if voice_message_channel.id not in botvoicechannel:                        botvoicechannel['Bot_Current_Voice_Channel'].append(voice_message_channel.id)                    if voice_message_server_name not in botvoicechannel:                        botvoicechannel['Bot_Current_Voice_Channel'].append(voice_message_server_name)                    if vchannel_name not in botvoicechannel:                        botvoicechannel['Bot_Current_Voice_Channel'].append(vchannel_name)                    json.dump(botvoicechannel, open(sys.path[0] + "\\resources\\ConfigData\\BotVoiceChannel.json", "w"))                    try:                        try:                            voice = await client.join_voice_channel(vchannel)                        except discord.errors.ConnectionClosed:                            pass                        try:                            msg_data = str(botmessages['join_voice_channel_command_data'][1]).format(vchannel.name)                            await client.send_message(message.channel, msg_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                    except discord.errors.InvalidArgument:                        voice_message_channel = None                        voice = None                        vchannel = None                        voice_message_server = None                        voice_message_server_name = None                        vchannel_name = None                        try:                            msg_data = str(botmessages['join_voice_channel_command_data'][2])                            await client.send_message(message.channel, msg_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                    except asyncio.TimeoutError:                        # no permission to join voice channel with this error???                        voice_message_channel = None                        voice = None                        vchannel = None                        voice_message_server = None                        voice_message_server_name = None                        vchannel_name = None                        try:                            msg_data = str(botmessages['join_voice_channel_command_data'][3])                            await client.send_message(message.channel, msg_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                    except discord.errors.ClientException:                        voice_message_channel = None                        voice = None                        vchannel = None                        voice_message_server = None                        try:                            msg_data = str(botmessages['join_voice_channel_command_data'][4])                            await client.send_message(message.channel, )                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                    except discord.opus.OpusNotLoaded:                        voice_message_channel = None                        voice = None                        vchannel = None                        voice_message_server = None                        voice_message_server_name = None                        vchannel_name = None                        try:                            msg_data = str(botmessages['join_voice_channel_command_data'][5])                            await client.send_message(message.channel, msg_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                    except IndexError:                        return        if message.content.startswith(_bot_prefix + 'play'):            if message.author.id in banlist['Users']:                return            elif is_bot_playing is False:                if voice is not None:                    if voice_message_channel is not None:                        if message.channel.id == voice_message_channel.id:                            try:                                data = message.content[len(_bot_prefix + "play "):].strip()                                if data == "":                                    try:                                        message_data = "You must Specify a URL in this command."                                        await client.send_message(voice_message_channel, message_data)                                    except discord.errors.Forbidden:                                        await BotPMError._resolve_send_message_error(client, message)                                else:                                    if '<' and '>' in data:                                        data = data.strip('<')                                        data = data.strip('>')                                    if 'www.youtube.com/watch?v=' in data:                                        player = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                                options=ffmop, output=ffmout)                                        _sent_finished_message = False                                        is_bot_playing = True                                        if player is not None:                                            try:                                                fulldir = player.duration                                                minutes = str(int((fulldir / 60) % 60))                                                seconds = str(int(fulldir % 60))                                                if len(seconds) == 1:                                                    seconds = "0" + seconds                                                try:                                                    data = "] ["                                                    msgdata = str(player.title) + "] by [" + str(player.uploader) + data                                                    part1 = "**Now Playing ["                                                    message_data = part1 + msgdata + minutes + ":" + seconds + "]**"                                                    await client.send_message(voice_message_channel, message_data)                                                except discord.errors.Forbidden:                                                    await BotPMError._resolve_send_message_error(client, message)                                                try:                                                    player.start()                                                except RuntimeError:                                                    pass                                            except AttributeError:                                                msgdata = 'Sorry, This Video must have either been deleted by the '                                                part1 = msgdata + 'owner. And/or  their account was supspended/'                                                messagedata = part1 + 'terminated by Youtube. **Or** the video '                                                message_data = messagedata + 'is not available in the United States.'                                                is_bot_playing = False                                                await client.send_message(voice_message_channel, message_data)                                    else:                                        message_data = 'The URL specified is nto a valid Youtube Video/Music URL.'                                        await client.send_message(voice_message_channel, message_data)                                        _temp_player_1 = None                            except IndexError:                                return                            except urllib.error.URLError:                                return                            except discord.errors.ClientException:                                msgdata = "Error: ffmpeg not found.\nCurrent Path Vars(With appeneds last 2 on end):"                                message_data = msgdata + "```py\n" + str(sys.path) + "\n```"                                await client.send_message(message.channel, message_data)                                player = None                            except youtube_dl.utils.ExtractorError:                                message_data = "Error When trying to extract the video from the Youtube video URL."                                await client.send_message(message.channel, message_data)                                player = None                            except youtube_dl.utils.UnsupportedError:                                await client.send_message(message.channel, "Unsupported Youtube video URL.")                                player = None                            except youtube_dl.utils.DownloadError:                                await client.send_message(message.channel, "Invalid or not a Youtube video URL.")                                player = None                        else:                            return                else:                    message_data = "This bot needs to be in a voice channel to be able to use this command."                    await client.send_message(message.channel, message_data)            else:                # we already know the bot is in a voice channel so we don't have to check for it.                if player is not None:                    data = message.content[len(_bot_prefix + "play "):].strip()                    if data == "":                        try:                            message_data = "You must Specify a URL in this command."                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                    else:                        if '<' and '>' in data:                            data = data.strip('<')                            data = data.strip('>')                        if 'www.youtube.com/watch?v=' in data:                            if len(bot_playlist) == 0:                                # create a temp player.                                ffmop = "-nostats -loglevel quiet"                                _temp_player_1 = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                                options=ffmop, output=ffmout)                                # setting up so that way we can use this to destroy the temp player.                                bot_playlist.append(data)                                try:                                    playlist01 = _temp_player_1.title                                    playlist01time = _temp_player_1.duration                                    track1 = '[' + playlist01 + ']'                                    fulldir = playlist01time                                    minutes = str(int((fulldir / 60) % 60))                                    seconds = str(int(fulldir % 60))                                    if len(seconds) == 1:                                        seconds = "0" + seconds                                    newdir = '[' + minutes + ':' + seconds + ']'                                    track1time = newdir                                    track1uploader = str(_temp_player_1.uploader)                                    track1info = track1 + ' by [' + track1uploader + '] ' + track1time                                    bot_playlist_entries.append(track1info)                                    msgdata = '**' + track1 + track1time + '** has been added to my playlist.'                                    message_data = msgdata                                    await client.send_message(message.channel, message_data)                                    _temp_player_1.stop()                                except AttributeError:                                    msgdata = 'Sorry, This Video must have either been deleted by the owner. '                                    part1 = msgdata + 'And/or  their account was supspended/'                                    messagedata = part1 + 'terminated by Youtube. **Or** the video '                                    message_data = messagedata + 'is not available in the United States.'                                    await client.send_message(voice_message_channel, message_data)                            elif data in bot_playlist:                                msgdata = 'Sorry, that url is already in my playlist.'                                message_data = msgdata                                await client.send_message(message.channel, message_data)                            elif len(bot_playlist) == 1:                                # create a temp player.                                _temp_player_2 = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                                options=ffmop, output=ffmout)                                # setting up so that way we can use this to destroy the temp player.                                bot_playlist.append(data)                                try:                                    playlist02 = _temp_player_2.title                                    playlist02time = _temp_player_2.duration                                    track2 = '[' + playlist02 + ']'                                    fulldir = playlist02time                                    minutes = str(int((fulldir / 60) % 60))                                    seconds = str(int(fulldir % 60))                                    if len(seconds) == 1:                                        seconds = "0" + seconds                                    newdir = '[' + minutes + ':' + seconds + ']'                                    track2time = newdir                                    track2uploader = str(_temp_player_2.uploader)                                    track2info = track2 + ' by [' + track2uploader + '] ' + track2time                                    bot_playlist_entries.append(track2info)                                    msgdata = '**' + track2 + track2time + '** has been added to my playlist.'                                    message_data = msgdata                                    await client.send_message(message.channel, message_data)                                    _temp_player_2.stop()                                except AttributeError:                                    msgdata = 'Sorry, This Video must have either been deleted by the owner. '                                    part1 = msgdata + 'And/or  their account was supspended/'                                    messagedata = part1 + 'terminated by Youtube. **Or** the video '                                    message_data = messagedata + 'is not available in the United States.'                                    await client.send_message(voice_message_channel, message_data)                            elif len(bot_playlist) == 2:                                # create a temp player.                                _temp_player_3 = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                                options=ffmop, output=ffmout)                                # setting up so that way we can use this to destroy the temp player.                                bot_playlist.append(data)                                try:                                    playlist03 = _temp_player_3.title                                    playlist03time = _temp_player_3.duration                                    track3 = '[' + playlist03 + ']'                                    fulldir = playlist03time                                    minutes = str(int((fulldir / 60) % 60))                                    seconds = str(int(fulldir % 60))                                    if len(seconds) == 1:                                        seconds = "0" + seconds                                    newdir = '[' + minutes + ':' + seconds + ']'                                    track3time = newdir                                    track3uploader = str(_temp_player_3.uploader)                                    track3info = track3 + ' by [' + track3uploader + '] ' + track3time                                    bot_playlist_entries.append(track3info)                                    msgdata = '**' + track3 + track3time + '** has been added to my playlist.'                                    message_data = msgdata                                    await client.send_message(message.channel, message_data)                                    _temp_player_3.stop()                                except AttributeError:                                    msgdata = 'Sorry, This Video must have either been deleted by the owner. '                                    part1 = msgdata + 'And/or  their account was supspended/'                                    messagedata = part1 + 'terminated by Youtube. **Or** the video '                                    message_data = messagedata + 'is not available in the United States.'                                    await client.send_message(voice_message_channel, message_data)                            elif len(bot_playlist) == 3:                                # create a temp player.                                _temp_player_4 = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                                options=ffmop, output=ffmout)                                # setting up so that way we can use this to destroy the temp player.                                bot_playlist.append(data)                                try:                                    playlist04 = _temp_player_4.title                                    playlist04time = _temp_player_4.duration                                    track4 = '[' + playlist04 + ']'                                    fulldir = playlist04time                                    minutes = str(int((fulldir / 60) % 60))                                    seconds = str(int(fulldir % 60))                                    if len(seconds) == 1:                                        seconds = "0" + seconds                                    newdir = '[' + minutes + ':' + seconds + ']'                                    track4time = newdir                                    track4uploader = str(_temp_player_4.uploader)                                    track4info = track4 + ' by [' + track4uploader + '] ' + track4time                                    bot_playlist_entries.append(track4info)                                    msgdata = '**' + track4 + track4time + '** has been added to my playlist.'                                    message_data = msgdata                                    await client.send_message(message.channel, message_data)                                    _temp_player_4.stop()                                except AttributeError:                                    msgdata = 'Sorry, This Video must have either been deleted by the owner. '                                    part1 = msgdata + 'And/or  their account was supspended/'                                    messagedata = part1 + 'terminated by Youtube. **Or** the video '                                    message_data = messagedata + 'is not available in the United States.'                                    await client.send_message(voice_message_channel, message_data)                            elif len(bot_playlist) == 4:                                # create a temp player.                                _temp_player_5 = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                                options=ffmop, output=ffmout)                                # setting up so that way we can use this to destroy the temp player.                                bot_playlist.append(data)                                try:                                    playlist05 = _temp_player_5.title                                    playlist05time = _temp_player_5.duration                                    track5 = '[' + playlist05 + ']'                                    fulldir = playlist05time                                    minutes = str(int((fulldir / 60) % 60))                                    seconds = str(int(fulldir % 60))                                    if len(seconds) == 1:                                        seconds = "0" + seconds                                    newdir = '[' + minutes + ':' + seconds + ']'                                    track5time = newdir                                    track5uploader = str(_temp_player_5.uploader)                                    track5info = track5 + ' by [' + track5uploader + '] ' + track5time                                    bot_playlist_entries.append(track5info)                                    msgdata = '**' + track5 + track5time + '** has been added to my playlist.'                                    message_data = msgdata                                    await client.send_message(message.channel, message_data)                                    _temp_player_5.stop()                                except AttributeError:                                    msgdata = 'Sorry, This Video must have either been deleted by the owner. '                                    part1 = msgdata + 'And/or  their account was supspended/'                                    messagedata = part1 + 'terminated by Youtube. **Or** the video '                                    message_data = messagedata + 'is not available in the United States.'                                    await client.send_message(voice_message_channel, message_data)                            elif len(bot_playlist) == 5:                                # create a temp player.                                _temp_player_6 = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                                options=ffmop, output=ffmout)                                # setting up so that way we can use this to destroy the temp player.                                bot_playlist.append(data)                                try:                                    playlist06 = _temp_player_6.title                                    playlist06time = _temp_player_6.duration                                    track6 = '[' + playlist06 + ']'                                    fulldir = playlist06time                                    minutes = str(int((fulldir / 60) % 60))                                    seconds = str(int(fulldir % 60))                                    if len(seconds) == 1:                                        seconds = "0" + seconds                                    newdir = '[' + minutes + ':' + seconds + ']'                                    track6time = newdir                                    track6uploader = str(_temp_player_6.uploader)                                    track6info = track6 + ' by [' + track6uploader + '] ' + track6time                                    bot_playlist_entries.append(track6info)                                    msgdata = '**' + track6 + track6time + '** has been added to my playlist.'                                    message_data = msgdata                                    await client.send_message(message.channel, message_data)                                    _temp_player_6.stop()                                except AttributeError:                                    msgdata = 'Sorry, This Video must have either been deleted by the owner. '                                    part1 = msgdata + 'And/or  their account was supspended/'                                    messagedata = part1 + 'terminated by Youtube. **Or** the video '                                    message_data = messagedata + 'is not available in the United States.'                                    await client.send_message(voice_message_channel, message_data)                            elif len(bot_playlist) == 6:                                # create a temp player.                                _temp_player_7 = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                                options=ffmop, output=ffmout)                                # setting up so that way we can use this to destroy the temp player.                                bot_playlist.append(data)                                try:                                    playlist07 = _temp_player_7.title                                    playlist07time = _temp_player_7.duration                                    track7 = '[' + playlist07 + ']'                                    fulldir = playlist07time                                    minutes = str(int((fulldir / 60) % 60))                                    seconds = str(int(fulldir % 60))                                    if len(seconds) == 1:                                        seconds = "0" + seconds                                    newdir = '[' + minutes + ':' + seconds + ']'                                    track7time = newdir                                    track7uploader = str(_temp_player_7.uploader)                                    track7info = track7 + ' by [' + track7uploader + '] ' + track7time                                    bot_playlist_entries.append(track7info)                                    msgdata = '**' + track7 + track7time + '** has been added to my playlist.'                                    message_data = msgdata                                    await client.send_message(message.channel, message_data)                                    _temp_player_7.stop()                                except AttributeError:                                    msgdata = 'Sorry, This Video must have either been deleted by the owner. '                                    part1 = msgdata + 'And/or  their account was supspended/'                                    messagedata = part1 + 'terminated by Youtube. **Or** the video '                                    message_data = messagedata + 'is not available in the United States.'                                    await client.send_message(voice_message_channel, message_data)                            elif len(bot_playlist) == 7:                                # create a temp player.                                _temp_player_8 = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                                options=ffmop, output=ffmout)                                # setting up so that way we can use this to destroy the temp player.                                bot_playlist.append(data)                                try:                                    playlist08 = _temp_player_8.title                                    playlist08time = _temp_player_8.duration                                    track8 = '[' + playlist08 + ']'                                    fulldir = playlist08time                                    minutes = str(int((fulldir / 60) % 60))                                    seconds = str(int(fulldir % 60))                                    if len(seconds) == 1:                                        seconds = "0" + seconds                                    newdir = '[' + minutes + ':' + seconds + ']'                                    track8time = newdir                                    track8uploader = str(_temp_player_8.uploader)                                    track8info = track8 + ' by [' + track8uploader + '] ' + track8time                                    bot_playlist_entries.append(track8info)                                    msgdata = '**' + track8 + track8time + '** has been added to my playlist.'                                    message_data = msgdata                                    await client.send_message(message.channel, message_data)                                    _temp_player_8.stop()                                except AttributeError:                                    msgdata = 'Sorry, This Video must have either been deleted by the owner. '                                    part1 = msgdata + 'And/or  their account was supspended/'                                    messagedata = part1 + 'terminated by Youtube. **Or** the video '                                    message_data = messagedata + 'is not available in the United States.'                                    await client.send_message(voice_message_channel, message_data)                            elif len(bot_playlist) == 8:                                # create a temp player.                                _temp_player_9 = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                                options=ffmop, output=ffmout)                                # setting up so that way we can use this to destroy the temp player.                                bot_playlist.append(data)                                try:                                    playlist09 = _temp_player_9.title                                    playlist09time = _temp_player_9.duration                                    track9 = '[' + playlist09 + ']'                                    fulldir = playlist09time                                    minutes = str(int((fulldir / 60) % 60))                                    seconds = str(int(fulldir % 60))                                    if len(seconds) == 1:                                        seconds = "0" + seconds                                    newdir = '[' + minutes + ':' + seconds + ']'                                    track9time = newdir                                    track9uploader = str(_temp_player_9.uploader)                                    track9info = track9 + ' by [' + track9uploader + '] ' + track9time                                    bot_playlist_entries.append(track9info)                                    msgdata = '**' + track9 + track9time + '** has been added to my playlist.'                                    message_data = msgdata                                    await client.send_message(message.channel, message_data)                                    _temp_player_9.stop()                                except AttributeError:                                    msgdata = 'Sorry, This Video must have either been deleted by the owner. '                                    part1 = msgdata + 'And/or  their account was supspended/'                                    messagedata = part1 + 'terminated by Youtube. **Or** the video '                                    message_data = messagedata + 'is not available in the United States.'                                    await client.send_message(voice_message_channel, message_data)                            elif len(bot_playlist) == 9:                                # create a temp player.                                opt = ytdlo                                _temp_player_10 = await voice.create_ytdl_player(data, ytdl_options=opt,                                                                                 options=ffmop, output=ffmout)                                # setting up so that way we can use this to destroy the temp player.                                bot_playlist.append(data)                                try:                                    playlist10 = _temp_player_10.title                                    playlist10time = _temp_player_10.duration                                    track10 = '[' + playlist10 + ']'                                    fulldir = playlist10time                                    minutes = str(int((fulldir / 60) % 60))                                    seconds = str(int(fulldir % 60))                                    if len(seconds) == 1:                                        seconds = "0" + seconds                                    newdir = '[' + minutes + ':' + seconds + ']'                                    track10time = newdir                                    track10uploader = str(_temp_player_10.uploader)                                    track10info = track10 + ' by [' + track10uploader + '] ' + track10time                                    bot_playlist_entries.append(track10info)                                    msgdata = '**' + track10 + track10time + '** has been added to my playlist.'                                    message_data = msgdata                                    await client.send_message(message.channel, message_data)                                    _temp_player_10.stop()                                except AttributeError:                                    msgdata = 'Sorry, This Video must have either been deleted by the owner. '                                    part1 = msgdata + 'And/or  their account was supspended/'                                    messagedata = part1 + 'terminated by Youtube. **Or** the video '                                    message_data = messagedata + 'is not available in the United States.'                                    await client.send_message(voice_message_channel, message_data)                            elif len(bot_playlist) == 10:                                msgdata = 'Sorry, my playlist is full right now.'                                message_data = msgdata                                await client.send_message(message.channel, message_data)        if message.content.startswith(_bot_prefix + 'stop'):            if message.author.id in banlist['Users']:                return            elif voice_message_channel is not None:                if message.channel.id == voice_message_channel.id:                    if player is not None:                        fulldir = player.duration                        minutes = str(int((fulldir / 60) % 60))                        seconds = str(int(fulldir % 60))                        if len(seconds) == 1:                            seconds = "0" + seconds                        try:                            msgdata = str(player.title) + "] by [" + str(player.uploader) + "] ["                            message_data = "**Stopped [" + msgdata + minutes + ":" + seconds + "]**"                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                        player.stop()                        BotPMError.ffm_cleanup(client, message)                        player = None                        is_bot_playing = False                        if len(bot_playlist) >= 1:                            try:                                try:                                    track_data = str(bot_playlist_entries[0])                                except IndexError:                                    pass                                data = str(bot_playlist[0])                                player = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                        options=ffmop, output=ffmout)                                if player is not None:                                    _sent_finished_message = False                                    try:                                        bot_playlist.remove(data)                                    except ValueError:                                        pass                                    if is_bot_playing is False:                                        is_bot_playing = True                                        try:                                            fulldir = player.duration                                            minutes = str(int((fulldir / 60) % 60))                                            seconds = str(int(fulldir % 60))                                            if len(seconds) == 1:                                                seconds = "0" + seconds                                            track_info = str(player.title) + "] by [" + str(player.uploader) + "] ["                                            track_info2 = track_info + minutes + ":" + seconds + "]"                                            message_data = "**Now Playing [" + track_info2 + "**"                                            await client.send_message(voice_message_channel, message_data)                                            try:                                                # noinspection PyUnboundLocalVariable                                                bot_playlist_entries.remove(track_info)                                            except ValueError:                                                pass                                        except discord.errors.Forbidden:                                            await BotPMError._resolve_send_message_error(client, message)                                        player.start()                            except UnboundLocalError:                                player = None                                is_bot_playing = False                    else:                        try:                            message_data = "Failed to stop the currently playing song/whatever it is as player is None."                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                else:                    return        if message.content.startswith(_bot_prefix + 'pause'):            if message.author.id in banlist['Users']:                return            elif voice_message_channel is not None:                if message.channel.id == voice_message_channel.id:                    if player is not None:                        fulldir = player.duration                        minutes = str(int((fulldir / 60) % 60))                        seconds = str(int(fulldir % 60))                        if len(seconds) == 1:                            seconds = "0" + seconds                        try:                            msgdata = str(player.title) + "] by [" + str(player.uploader) + "] ["                            message_data = "**Paused [" + msgdata + minutes + ":" + seconds + "]**"                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                        player.pause()                    else:                        message_data = "Failed to pause the currently playing song/whatever it is as player is None."                        await client.send_message(voice_message_channel, message_data)                else:                    return            else:                message_data = 'This bot must be in a voice channel to be able to pause a Youtube Video/Music.'                await client.send_message(message.channel, message_data)        if message.content.startswith(_bot_prefix + 'unpause'):            if message.author.id in banlist['Users']:                return            elif voice_message_channel is not None:                if message.channel.id == voice_message_channel.id:                    if player is not None:                        fulldir = player.duration                        minutes = str(int((fulldir / 60) % 60))                        seconds = str(int(fulldir % 60))                        if len(seconds) == 1:                            seconds = "0" + seconds                        try:                            msgdata = str(player.title) + "] by [" + str(player.uploader) + "] ["                            message_data = "**Resumed [" + msgdata + minutes + ":" + seconds + "]**"                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                        player.resume()                    else:                        try:                            msgdata = "Failed to resume the currently playing song/whatever it is as player is None."                            message_data = msgdata                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                else:                    return            else:                message_data = 'This bot must be in a voice channel to be able to unpause a Youtube Video/Music.'                await client.send_message(message.channel, message_data)        if message.content.startswith(_bot_prefix + 'move'):            if message.author.id in banlist['Users']:                return            elif voice_message_channel is not None:                if message.channel.id == voice_message_channel.id:                    vchannel = message.author.voice_channel                    bot = message.channel.server.get_member_named('DecoraterBot#5102')                    try:                        await client.move_member(bot, vchannel)                        try:                            message_data = 'Moved to the ' + vchannel.name + " Voice Channel."                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                    except discord.errors.InvalidArgument:                        try:                            message_data = 'The Channel specified is not a voice channel.'                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                    except discord.errors.Forbidden:                        try:                            msgdata = 'This bot does not have permissions to move members to the '                            message_data = msgdata + vchannel.name + ' Voice Channel.'                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                    except discord.errors.HTTPException:                        try:                            message_data = 'Failed to move to the ' + vchannel.name + ' Voice Channel.'                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                else:                    return        if player is not None:            if voice_message_channel is not None:                if player.is_done() is True:                    fulldir = player.duration                    minutes = str(int((fulldir / 60) % 60))                    seconds = str(int(fulldir % 60))                    if len(seconds) == 1:                        seconds = "0" + seconds                    if _sent_finished_message is False:                        _sent_finished_message = True                        BotPMError.ffm_cleanup(client, message)                        is_bot_playing = False                        try:                            track_info = str(player.title) + "] by [" + str(player.uploader) + "] [" + minutes + ":"                            message_data = "**Finished [" + track_info + seconds + "]**"                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                    if len(bot_playlist) == 0:                        player = None                    if len(bot_playlist) >= 1:                        try:                            try:                                track_data = str(bot_playlist_entries[0])                            except IndexError:                                pass                            data = str(bot_playlist[0])                            try:                                player = await voice.create_ytdl_player(data, ytdl_options=ytdlo,                                                                        options=ffmop, output=ffmout)                            except AttributeError:                                is_bot_playing = False                            if player is not None:                                _sent_finished_message = False                                try:                                    bot_playlist.remove(data)                                except ValueError:                                    pass                                try:                                    # noinspection PyUnboundLocalVariable                                    bot_playlist_entries.remove(track_data)                                except ValueError:                                    pass                                if is_bot_playing is False:                                    is_bot_playing = True                                    try:                                        fulldir = player.duration                                        minutes = str(int((fulldir / 60) % 60))                                        seconds = str(int(fulldir % 60))                                        if len(seconds) == 1:                                            seconds = "0" + seconds                                        track_info = str(player.title) + "] by [" + str(player.uploader) + "] ["                                        track_info2 = track_info + minutes + ":" + seconds + "]"                                        message_data = "**Now Playing [" + track_info2 + "**"                                        await client.send_message(voice_message_channel, message_data)                                        try:                                            # noinspection PyUnboundLocalVariable                                            bot_playlist_entries.remove(track_info)                                        except ValueError:                                            pass                                    except discord.errors.Forbidden:                                        await BotPMError._resolve_send_message_error(client, message)                                    player.start()                        except UnboundLocalError:                            # player = None                            is_bot_playing = False        if message.content.startswith(_bot_prefix + 'LeaveVoiceChannel'):            if message.author.id in banlist['Users']:                return            elif voice is not None:                if voice_message_channel is not None:                    if message.channel.id == voice_message_channel.id:                        await voice.disconnect()                        botvoicechannel['Bot_Current_Voice_Channel'].remove(vchannel.id)                        botvoicechannel['Bot_Current_Voice_Channel'].remove(voice_message_server.id)                        botvoicechannel['Bot_Current_Voice_Channel'].remove(voice_message_channel.id)                        botvoicechannel['Bot_Current_Voice_Channel'].remove(voice_message_server_name)                        botvoicechannel['Bot_Current_Voice_Channel'].remove(vchannel_name)                        json.dump(botvoicechannel, open(sys.path[0] + "\\resources\\ConfigData\\BotVoiceChannel.json",                                                        "w"))                        try:                            try:                                message_data = "Left the " + vchannel.name + " Voice Channel."                            except AttributeError:                                message_data = "Left the " + vchannel_name + " Voice Channel."                            await client.send_message(voice_message_channel, message_data)                        except discord.errors.Forbidden:                            await BotPMError._resolve_send_message_error(client, message)                        vchannel = None                        voice_message_channel = None                        voice = None                        vchannel_name = None                        if player is not None:                            player = None                        voice_message_server = None                        if is_bot_playing is True:                            is_bot_playing = False                    else:                        return            else:                msgdata = 'This bot does not have a Voice Channel to leave.'                message_data = msgdata                await client.send_message(message.channel, message_data)        if message.content.startswith(_bot_prefix + 'Playlist'):            if message.author.id in banlist['Users']:                return            elif len(bot_playlist_entries) == 0:                track1 = 'Empty[00:00]'                track2 = 'Empty[00:00]'                track3 = 'Empty[00:00]'                track4 = 'Empty[00:00]'                track5 = 'Empty[00:00]'                track6 = 'Empty[00:00]'                track7 = 'Empty[00:00]'                track8 = 'Empty[00:00]'                track9 = 'Empty[00:00]'                track10 = 'Empty[00:00]'            elif len(bot_playlist_entries) == 1:                track1 = str(bot_playlist_entries[0])                track2 = 'Empty[00:00]'                track3 = 'Empty[00:00]'                track4 = 'Empty[00:00]'                track5 = 'Empty[00:00]'                track6 = 'Empty[00:00]'                track7 = 'Empty[00:00]'                track8 = 'Empty[00:00]'                track9 = 'Empty[00:00]'                track10 = 'Empty[00:00]'            elif len(bot_playlist_entries) == 2:                track1 = str(bot_playlist_entries[0])                track2 = str(bot_playlist_entries[1])                track3 = 'Empty[00:00]'                track4 = 'Empty[00:00]'                track5 = 'Empty[00:00]'                track6 = 'Empty[00:00]'                track7 = 'Empty[00:00]'                track8 = 'Empty[00:00]'                track9 = 'Empty[00:00]'                track10 = 'Empty[00:00]'            elif len(bot_playlist_entries) == 3:                track1 = str(bot_playlist_entries[0])                track2 = str(bot_playlist_entries[1])                track3 = str(bot_playlist_entries[2])                track4 = 'Empty[00:00]'                track5 = 'Empty[00:00]'                track6 = 'Empty[00:00]'                track7 = 'Empty[00:00]'                track8 = 'Empty[00:00]'                track9 = 'Empty[00:00]'                track10 = 'Empty[00:00]'            elif len(bot_playlist_entries) == 4:                track1 = str(bot_playlist_entries[0])                track2 = str(bot_playlist_entries[1])                track3 = str(bot_playlist_entries[2])                track4 = str(bot_playlist_entries[3])                track5 = 'Empty[00:00]'                track6 = 'Empty[00:00]'                track7 = 'Empty[00:00]'                track8 = 'Empty[00:00]'                track9 = 'Empty[00:00]'                track10 = 'Empty[00:00]'            elif len(bot_playlist_entries) == 5:                track1 = str(bot_playlist_entries[0])                track2 = str(bot_playlist_entries[1])                track3 = str(bot_playlist_entries[2])                track4 = str(bot_playlist_entries[3])                track5 = str(bot_playlist_entries[4])                track6 = 'Empty[00:00]'                track7 = 'Empty[00:00]'                track8 = 'Empty[00:00]'                track9 = 'Empty[00:00]'                track10 = 'Empty[00:00]'            elif len(bot_playlist_entries) == 6:                track1 = str(bot_playlist_entries[0])                track2 = str(bot_playlist_entries[1])                track3 = str(bot_playlist_entries[2])                track4 = str(bot_playlist_entries[3])                track5 = str(bot_playlist_entries[4])                track6 = str(bot_playlist_entries[5])                track7 = 'Empty[00:00]'                track8 = 'Empty[00:00]'                track9 = 'Empty[00:00]'                track10 = 'Empty[00:00]'            elif len(bot_playlist_entries) == 7:                track1 = str(bot_playlist_entries[0])                track2 = str(bot_playlist_entries[1])                track3 = str(bot_playlist_entries[2])                track4 = str(bot_playlist_entries[3])                track5 = str(bot_playlist_entries[4])                track6 = str(bot_playlist_entries[5])                track7 = str(bot_playlist_entries[6])                track8 = 'Empty[00:00]'                track9 = 'Empty[00:00]'                track10 = 'Empty[00:00]'            elif len(bot_playlist_entries) == 8:                track1 = str(bot_playlist_entries[0])                track2 = str(bot_playlist_entries[1])                track3 = str(bot_playlist_entries[2])                track4 = str(bot_playlist_entries[3])                track5 = str(bot_playlist_entries[4])                track6 = str(bot_playlist_entries[5])                track7 = str(bot_playlist_entries[6])                track8 = str(bot_playlist_entries[7])                track9 = 'Empty[00:00]'                track10 = 'Empty[00:00]'            elif len(bot_playlist_entries) == 9:                track1 = str(bot_playlist_entries[0])                track2 = str(bot_playlist_entries[1])                track3 = str(bot_playlist_entries[2])                track4 = str(bot_playlist_entries[3])                track5 = str(bot_playlist_entries[4])                track6 = str(bot_playlist_entries[5])                track7 = str(bot_playlist_entries[6])                track8 = str(bot_playlist_entries[7])                track9 = str(bot_playlist_entries[8])                track10 = 'Empty[00:00]'            elif len(bot_playlist_entries) == 10:                track1 = str(bot_playlist_entries[0])                track2 = str(bot_playlist_entries[1])                track3 = str(bot_playlist_entries[2])                track4 = str(bot_playlist_entries[3])                track5 = str(bot_playlist_entries[4])                track6 = str(bot_playlist_entries[5])                track7 = str(bot_playlist_entries[6])                track8 = str(bot_playlist_entries[7])                track9 = str(bot_playlist_entries[8])                track10 = str(bot_playlist_entries[9])            # noinspection PyUnboundLocalVariable            msgdata = "Track 0 : **" + track1 + "**\nTrack 1 : **" + track2 + "**\nTrack 2 : **"            # noinspection PyUnboundLocalVariable            msgdata1 = msgdata + track3 + "**\nTrack 3 : **" + track4 + "**\nTrack 4 : **"            # noinspection PyUnboundLocalVariable            msgdata2 = msgdata1 + track5 + "**\nTrack 5 : **" + track6 + "**\nTrack 6 : **"            # noinspection PyUnboundLocalVariable            msgdata3 = msgdata2 + track7 + "**\nTrack 7 : **" + track8 + "**\nTrack 8 : **"            # noinspection PyUnboundLocalVariable            msgdata4 = msgdata3 + track9 + "**\nTrack 9 : **" + track10 + "**"            message_data = msgdata4            await client.send_message(message.channel, message_data)        if message.content.startswith(_bot_prefix + "vol"):            if message.author.id in banlist['Users']:                return            elif voice_message_channel is not None:                if message.channel.id == voice_message_channel.id:                    if player is not None:                        value_string = message.content.strip(_bot_prefix + "vol ")                        value = int(value_string) / 100                        # noinspection PyChainedComparisons                        if value >= 0.0 and value <= 2.0:                            player.volume = value                            await client.send_message(voice_message_channel, "Volume changed to ``" + value_string +                                                      "%``")                        else:                            await client.send_message(voice_message_channel,                                                      "Sorry, volume can only be within the range of "                                                      "0~200. Please try again.")                    else:                        await client.send_message(voice_message_channel,                                                  "Sorry, you can only use this when the bot is playing something.")    @classmethod    async def _reload_commands_bypass1_new(self, client, message, reload_reason):        global player        global vchannel        global vchannel_name        global voice_message_channel        global voice        global _sent_finished_message        global voice_message_server        global is_bot_playing        global voice_message_server_name        if voice is not None:            await voice.disconnect()            if voice_message_channel is not None:                try:                    if reload_reason is not None:                        try:                            message_data = "Left the " + vchannel.name + " Voice Channel. Reason: " + reload_reason                        except AttributeError:                            # noinspection PyTypeChecker                            message_data = "Left the " + vchannel_name + " Voice Channel. Reason: " + reload_reason                    else:                        reason = 'Owner is reloading Voice Channel Commands.'                        try:                            message_data = "Left the " + vchannel.name + " Voice Channel. Reason: " + reason                        except AttributeError:                            # noinspection PyTypeChecker                            message_data = "Left the " + vchannel_name + " Voice Channel. Reason: " + reason                    await client.send_message(voice_message_channel, message_data)                    voice_message_channel = None                    voice = None                    vchannel = None                    voice_message_server = None                    player = None                    vchannel_name = None                    _sent_finished_message = False                    voice_message_server_name = None                    is_bot_playing = False                except discord.errors.Forbidden:                    await BotPMError._resolve_send_message_error(client, message)    # noinspection PyUnusedLocal,PyUnboundLocalVariable    @classmethod    async def _reload_commands_bypass2_new(self, client, message):        global vchannel        global voice        global voice_message_server        global voice_message_channel        global voice_message_server_name        global vchannel_name        global verror        try:            botvoicechannelfile = io.open(sys.path[0] + '\\resources\\ConfigData\\BotVoiceChannel.json', 'r')            botvoicechannel_reloaded = json.load(botvoicechannelfile)            botvoicechannelfile.close()        except FileNotFoundError:            pass        try:            vchannel_2 = str(botvoicechannel_reloaded['Bot_Current_Voice_Channel'][0])            vmserver = str(botvoicechannel_reloaded['Bot_Current_Voice_Channel'][1])            vmchannel = str(botvoicechannel_reloaded['Bot_Current_Voice_Channel'][2])            voice_message_server_name = str(botvoicechannel_reloaded['Bot_Current_Voice_Channel'][3])            vchannel_name = str(botvoicechannel_reloaded['Bot_Current_Voice_Channel'][4])            vchannel = discord.Object(id=vchannel_2)            voice_message_server = discord.Object(id=vmserver)            voice_message_channel = discord.Object(id=vmchannel)            try:                voice = await client.join_voice_channel(vchannel)                verror = False            except discord.errors.ConnectionClosed:                pass            except discord.errors.InvalidArgument:                # this happens when bot tries to reconnect and it ends up failing due to server outage.                # so in this case we should return with nothing to pass the exception but also return                # the function so it does nothing else.                voice_message_server_name = None                vchannel_name = None                vchannel = None                voice_message_server = None                voice_message_channel = None                voice = None                verror = True            except concurrent.futures._base.TimeoutError:                await client.send_message(message.channel,                                          "A Timeout Error Kept the bot from Rejoining the Voice Channel.")                voice_message_server_name = None                vchannel_name = None                vchannel = None                voice_message_server = None                voice_message_channel = None                voice = None                verror = True            if verror is not True:                message_data = "Rejoined the " + vchannel_name + " Voice Channel."                await client.send_message(voice_message_channel, message_data)        except IndexError:            voice_message_server_name = None            vchannel_name = None            vchannel = None            voice_message_server = None            voice_message_channel = None            voice = None    # noinspection PyUnusedLocal    @classmethod    async def _reload_commands_bypass3_new(self, client):        global vchannel        global voice        global voice_message_server        global voice_message_channel        global voice_message_server_name        global vchannel_name        global verror        try:            vchannel_2 = str(botvoicechannel['Bot_Current_Voice_Channel'][0])            vmserver = str(botvoicechannel['Bot_Current_Voice_Channel'][1])            vmchannel = str(botvoicechannel['Bot_Current_Voice_Channel'][2])            voice_message_server_name = str(botvoicechannel['Bot_Current_Voice_Channel'][3])            vchannel_name = str(botvoicechannel['Bot_Current_Voice_Channel'][4])            vchannel = discord.Object(id=vchannel_2)            voice_message_server = discord.Object(id=vmserver)            voice_message_channel = discord.Object(id=vmchannel)            discord.opus.load_opus(opusdll)            try:                voice = await client.join_voice_channel(vchannel)                verror = False            except discord.errors.ConnectionClosed:                pass            except discord.errors.InvalidArgument:                # this happens when bot tries to reconnect and it ends up failing due to server outage.                # so in this case we should return with nothing to pass the exception but also return                # the function so it does nothing else.                voice_message_server_name = None                vchannel_name = None                vchannel = None                voice_message_server = None                voice_message_channel = None                voice = None                verror = True            if verror is not True:                message_data = "Rejoined the " + vchannel_name + " Voice Channel."                await client.send_message(voice_message_channel, message_data)        except IndexError:            voice_message_server_name = None            vchannel_name = None            vchannel = None            voice_message_server = None            voice_message_channel = None            voice = None    # noinspection PyUnusedLocal    @classmethod    async def _reload_commands_bypass4_new(self, client, message, reload_reason):        global player        global vchannel        global vchannel_name        global voice_message_channel        global voice        global _sent_finished_message        global voice_message_server        global is_bot_playing        global voice_message_server_name        if voice is not None:            await voice.disconnect()            if voice_message_channel is not None:                try:                    if reload_reason is not None:                        try:                            message_data = "Left the " + vchannel.name + " Voice Channel. Reason: " + reload_reason                        except AttributeError:                            # noinspection PyTypeChecker                            message_data = "Left the " + vchannel_name + " Voice Channel. Reason: " + reload_reason                    else:                        reason = 'Owner is doing a high level reload.'                        try:                            message_data = "Left the " + vchannel.name + " Voice Channel. Reason: " + reason                        except AttributeError:                            # noinspection PyTypeChecker                            message_data = "Left the " + vchannel_name + " Voice Channel. Reason: " + reason                    await client.send_message(voice_message_channel, message_data)                    voice_message_channel = None                    voice = None                    vchannel = None                    voice_message_server = None                    player = None                    vchannel_name = None                    _sent_finished_message = False                    voice_message_server_name = None                    is_bot_playing = False                except discord.errors.Forbidden:                    await BotPMError._resolve_send_message_error(client, message)